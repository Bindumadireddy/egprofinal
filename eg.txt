'use strict';

var hapi = require('@hapi/hapi');
var mysql=require('mysql');
require("dotenv").config();

    var server = hapi.server({
        port: 3000,
        host: 'localhost'
    });
    //1.1get
     server.route({
        method: 'GET',
        path:'/api/producer/',
        handler: (request, reply) => {
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from producer`,function(error,producer,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })

        
        }
    });
     //1.2 post
      server.route({
    method: 'POST',
    path: '/api/producer',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
        var names=request.payload.name;
        var mail=request.payload.email;
        var password=request.payload.password_hash;
        var twitter=request.payload.twitter_name;
        var cloudname=request.payload.soundcloud_name;
        var statuss=request.payload.status;
        if((names.length==1)||(mail.length==1)||(password.length==1)||(twitter.length==1)||(cloudname.length==1))
        {
            return "all fields must be filled";
        }
        else{
            if(name.length>=32){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(names.include("XxXxStr8FireXxX")==true){
                errors.push("enter valid name")
                c++;
            }
            if(mail.length>=256){
                errors.push("should contain less than 256 letters")
                c++;
            }
            if(mail.includes("@gmail.com")==false){
                errors.push("should be vaild email")
                c++;
            }
            if(password.length<=10){
                errors.push("it should contain strong password")
                c++;
            }
            if(twitter.length>=16){
                errors.push("it should contain less than 16 letters")
                c++;
            }
            if(cloudname.length>=32){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if((statuss!='none')&&(statuss!='not ready')&&(statuss!='featured')){
                errors.push("it should contain valid status")
                c++;
            }

        }
        if(c!=0)
            return errors;
        else
        {
            var newproducer=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`INSERT INTO producer(name,email,password_hash,twitter_name,soundcloud_name,status)
                 values('${newproducer.name}','${newproducer.email}','${newproducer.password_hash}','${newproducer.twitter_name}','${newproducer.soundcloud_name}','${newproducer.status}')`,function(error,producer,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })
        }

        
        }
    });
        //1.3 get id
       
    server.route({
    method: 'GET',
    path: '/api/producer/{id}',
    handler: (request, reply)=>{
        var id=request.params.id;
        return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from producer where id=${id}`,function(error,producer,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })
        }

        
        
    });
        

//1.4 delete
    server.route({
    method: 'DELETE',
    path: '/api/producer/{id}',
    handler: (request, reply)=>{
        var num=request.params.id;
        return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`DELETE from producer where id=${num}`,function(error,producer,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })
        }

        
        
    });
    //1.5 put
    server.route({
    method: 'PUT',
    path: '/api/producer/{id}',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
        var names=request.payload.name;
        var mail=request,payload.email;
        var password=request.payload.password_hash;
        var twitter=request.payload.twitter_name;
        var cloudname=request.payload.soundcloud_name;
        var statuss=request.payload.status;
        if((names.length==1)||(mail.length==1)||(password.length==1)||(twitter.length==1)||(cloudname.length==1))
        {
            return "all fields must be filled";
        }
        else{
            if(name.length>=32){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(names.include("XxXxStr8FireXxX")==true){
                errors.push("enter valid name")
                c++;
            }
            if(mail.length>=256){
                errors.push("should contain less than 256 letters")
                c++;
            }
            if(mail.includes("@gmail.com")==false){
                errors.push("should be vaild email")
                c++;
            }
            if(password.length<=10){
                errors.push("it should contain strong password")
                c++;
            }
            if(twitter.length>=16){
                errors.push("it should contain less than 16 letters")
                c++;
            }
            if(cloudname.length>=32){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if((statuss!='none')&&(statuss!='not ready')&&(statuss!='featured')){
                errors.push("it should contain valid status")
                c++;
            }

        }
        if(c!=0)
            return errors;
        else
        {
            var id=request.params.id;
            var newproducer=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`UPDATE producer SET name='${newproducer.name}',email='${newproducer.email}',password_hash='${newproducer.password_hash}',twitter_name='${newproducer.twitter_name}',soundcloud_name='${newproducer.soundcloud_name}' where id=${id}`,function(error,producer,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })
        }

        
        }
    });
    //2.0 get
     server.route({
        method: 'GET',
        path:'/api/beats',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{

                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from producer`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })

        
        }
    });
     //1.6 get approve beats
         server.route({
        method: 'GET',
        path:'/api/producer/approved',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT name,beat_name from producer inner join beat on producer.id=beat.producer_id where submit_date!='null'`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })

        
        }
    });
         //1.7 get submitted beats
       
 server.route({
        method: 'GET',
        path:'/api/producer/submitted',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from producer`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(producer);
                });
                connection.end();
            })

        
        }
    });
       
       //section 2 beats 
       //2.1 get if submitted but not approved
        server.route({
        method: 'GET',
        path:'/api/beats/submitted',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from beats where submit_date!='null' and approved=0`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })

        
        }
    });
        //2.2 get beats between two dates
        server.route({
        method: 'GET',
        path:'/api/beats/approved/{startdate}/{enddate}',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from beats where approved=1 and post between '${startdate}' and '${enddate}' `,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })

        
        }
    });
        //2.3 get beats from a certain date to till date
        server.route({
        method: 'GET',
        path:'/api/beats/posted/{startdate}',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from beats where approved=1 and post between '${startdate}' and current_timestamp`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })

        
        }
    });
        //2.4 get approved beats with no yet approval date
        server.route({
        method: 'GET',
        path:'/api/beats/pending',
        handler: (request, reply) => {
            var startdate=request.params.startdate;
                var enddate=request.params.enddate;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from beats where approved=1 and approval_date>current_timestamp or approval_date='null`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })

        
        }
    });
        //2.5 post
        server.route({
    method: 'POST',
    path: '/api/beats',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
        name=request.payload.beat_url;
        var url=request.payload.beat_url;
        var approval=request.payload.approval_date;
        var producers=request.payload.producer_id;
        var submit=request.payload.submit_date;
        var approve=request.payload.approval_date;
        var posted=request.payload.post_date_time;
        if((name.length==1)||(url.length==1)||(approval.length==1)||(producers.length==1)||(submit.length==1)||(approval.length==1)||(posted.length==1))
        {
            return "all fields must be filled";
        }
        else{
            if(name.length>=64){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(name.includes("MUST LISTEN")==true){
                errors.push("enter valid name")
                c++;
            }
        }
        if(c!=0)
            return errors;
        else
        {
            var newbeat=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`INSERT INTO beats(beat_name,beat_url,approved,producer_id,submit_date,approval_date,post_date_time)
                 values('${newbeat.beat_name}','${newbeat.beat_url}','${newbeat.approved}','${newbeat.producer_id}','${newbeat.submit_date}','${newbeat.approval_date}','${newbeat.post_date_time}')`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        }
    });
        
        
//2.6 get id 
 server.route({
    method: 'GET',
    path: '/api/beats/{id}',
    handler: (request, reply)=>{
        var id=request.params.id;
        return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`SELECT * from beats where beat_id=${id}`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        
    });
 //2.7 delete 
  server.route({
    method: 'DELETE',
    path: '/api/beats/{id}',
    handler: (request, reply)=>{
        var id=request.params.id;
        return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`DELETE from beats where beat_id=${id}`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        
    });
  //2.8 put
   server.route({
    method: 'PUT',
    path: '/api/beats/{id}',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
        name=request.payload.beat_url;
        var url=request.payload.beat_url;
        var approval=request.payload.approval_date;
        var producers=request.payload.producer_id;
        var submit=request.payload.submit_date;
        var approve=request.payload.approval_date;
        var posted=request.payload.post_date_time;
        if((name.length==1)||(url.length==1)||(approval.length==1)||(producers.length==1)||(submit.length==1)||(approval.length==1)||(posted.length==1))
        {
            return "all fields must be filled";
        }
        else{
            if(name.length>=64){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(name.includes("MUST LISTEN")==true){
                errors.push("enter valid name")
                c++;
            }
        }
        if(c!=0)
            return errors;
        else
        {
            var newbeat=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`UPDATE beats SET beat_name='${newbeat.beat_name}',beat_url='${newbeat.beat_url}',approved='${newbeat.approved}',producer_id='${newbeat.producer_id}',submit_date='${newbeat.submit_date}',approval_date='${newbeat.approval_date}',post_date_time='${newbeat.post_date_time}'
                    where beat_id=${id}`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        }
    });
   //2.9 put approved beats
        server.route({
    method: 'PUT',
    path: '/api/beats/approve/{id}',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
       var name=request.payload.beat_name;
            if(name.length>=64){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(name.includes("MUST LISTEN")==true){
                errors.push("enter valid name")
                c++;
            }
        }
        if(c!=0)
            return errors;
        else
        {
            var id=request.params.id;
            var newbeat=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`UPDATE beats SET approval_date='${newbeat.approval_date}',post_date_time='${newbeat.post_date_time}'
                    where beat_id=${id}`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        }
    });
//2.10  put unapproved beats
        
        server.route({
    method: 'PUT',
    path: '/api/beats/unapprove/{id}',
    handler: (request, reply)=>{
        var errors=[];
        var c=0;
       var name=request.payload.beat_name;
            if(name.length>=64){
                errors.push("it should contain less than 32 letters")
                c++;
            }
            if(name.includes("MUST LISTEN")==true){
                errors.push("enter valid name")
                c++;
            }
        }
        if(c!=0)
            return errors;
        else
        {
            var id=request.params.id;
            var newbeat=request.payload;
            return new promise((resolve,reject)=>{
                var connection=mysql.createconnection({
                    host:process.env.DB_HOST,
                    user:process.env.DB_USER,
                    database:process.env.DB_NAME

                });
                connection.connect();
                connection.query(`UPDATE beats SET approval_date='${newbeat.approval_date}',post_date_time='${newbeat.post_date_time}'
                    where beat_id=${id}`,function(error,beats,fields){
                    if(error) reject(error);
                    resolve(beats);
                });
                connection.end();
            })
        }

        
        }
    });
     
    server.start((err)=>{
        if(err) throw err;
    })
    console.log('Server is started");


